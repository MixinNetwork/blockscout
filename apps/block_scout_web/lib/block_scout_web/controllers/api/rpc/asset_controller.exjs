defmodule BlockScoutWeb.API.RPC.AssetController do
  use BlockScoutWeb, :controller

  alias BlockScoutWeb.API.RPC.Helpers
  alias Ecto.UUID
  alias Explorer.{Chain, PagingOptions}
  alias Explorer.Chain.Hash.Address

  def getassets(conn, params) do
    with {:address_param, {:ok, address_param}} <- fetch_address(params),
         {:format, {:ok, address_hash}} <- to_address_hash(address_param),
         {:address, :ok} <- {:address, Chain.check_address_exists(address_hash)},
         {:ok, token_list} <- list_tokens(address_hash) do
      user_assets_with_balance = Enum.map(token_list, fn x -> x.mixin_asset_id end)

      total_assets = Chain.list_top_tokens("", paging_options: %PagingOptions{page_size: 1000})

      default_assets =
        Enum.map(
          Enum.filter(total_assets, fn x ->
            not Enum.member?(user_assets_with_balance, x.mixin_asset_id) and
              Enum.member?(@mvm_default_assets, x.mixin_asset_id)
          end),
          fn x ->
            x
            |> Map.from_struct()
            |> Map.put(:balance, "0")
          end
        )

      eth = %{
        balance: Decimal.to_string(balance.value),
        contract_address_hash: "",
        native_contract_address: "",
        mixin_asset_id: "43d61dcd-e413-450d-80b8-101d5e903357",
        name: "Ether",
        decimals: "18",
        symbol: "ETH",
        type: ""
      }

      merged =
        Enum.map([eth | token_list ++ default_assets], fn x ->
          info = Chain.token_add_price_and_chain_info(x)

          asset = %{
            "balance" => to_string(x.balance),
            "contractAddress" => to_string(x.contract_address_hash),
            "nativeContractAddress" => if(is_nil(x.native_contract_address), do: "", else: x.native_contract_address),
            "mixinAssetId" => x.mixin_asset_id,
            "name" => x.name,
            "decimals" => to_string(x.decimals),
            "symbol" => x.symbol,
            "type" => x.type,
            "priceUSD" => info.price_usd,
            "priceBTC" => info.price_btc
          }

          if is_nil(info.chain_id) or is_nil(info.chain_name) or is_nil(info.chain_symbol) or
               is_nil(info.chain_icon_url) do
            asset
          else
            asset
            |> Map.put("chainId", info.chain_id)
            |> Map.put("chainName", info.chain_name)
            |> Map.put("chainSymbol", info.chain_symbol)
            |> Map.put("chainIconUrl", info.chain_icon_url)
          end
        end)

      final = Enum.sort_by(merged, fn x -> String.to_integer(x["balance"]) end, :desc)
      render(conn, :assets, %{asset_list: final})
    else
      {:address_param, :error} ->
        render(conn, :error, error: "Query parameter 'address' is required")

      {:format, :error} ->
        render(conn, :error, error: "Invalid address hash")

      {_, :not_found} ->
        render(conn, :error, error: "No tokens found", data: [])

      {:block_param, :error} ->
        conn
        |> put_status(400)
        |> render(:eth_get_balance_error, %{error: "Invalid block"})

      {:balance, {:error, :not_found}} ->
        conn
        |> put_status(404)
        |> render(:eth_get_balance_error, %{error: "Balance not found"})
    end
  end

  def getmixinassets(conn, _params) do
    total_assets = Chain.list_top_tokens("", paging_options: %PagingOptions{page_size: 1000})

    erc20_assets =
      Enum.filter(total_assets, fn x ->
        x.type == "ERC-20" and not is_nil(x.mixin_asset_id)
      end)

    asset_list =
      Enum.map(erc20_assets, fn t ->
        info = Chain.token_add_price_and_chain_info(t)
        asset = Map.merge(Map.from_struct(t), info)
        asset
      end)

    render(conn, :getmixinassets, %{asset_list: asset_list})
  end

  def search(conn, %{"q" => query} = _params) do
    res = Chain.search_token_asset(query)

    erc20_assets =
      Enum.filter(res, fn x ->
        x.type == "ERC-20" and not is_nil(x.mixin_asset_id)
      end)

    asset_list =
      Enum.map(erc20_assets, fn t ->
        info = Chain.token_add_price_and_chain_info(t)
        asset = Map.merge(t, info)
        asset
      end)

    render(conn, :search, %{list: asset_list})
  end

  def batchsearch(conn, params) do
    with {:index_type, {:ok, index_type}} <- fetch_type(params),
         {:indices, {:ok, indices}} <- fetch_indices(params),
         {:user_address, user} <- fetch_user(params),
         {:ok, index_list} <- is_valid_type_and_indices(index_type, indices),
         {:ok, user_address_hash} <- is_valid_user_address(user) do
      tokens = Chain.search_batch_tokens(index_type, index_list, user_address_hash)

      asset_list =
        Enum.map(tokens, fn t ->
          info = Chain.token_add_price_and_chain_info(t)
          Map.merge(t, info)
        end)

      render(conn, :batchsearch, %{list: asset_list})
    else
      {:index_type, :error} ->
        conn
        |> put_status(200)
        |> render(:error, error: "Type is required.")

      {:indices, :error} ->
        conn
        |> put_status(200)
        |> render(:error, error: "Indices is required.")

      {:error, :invalid_type} ->
        conn
        |> put_status(200)
        |> render(:error, error: "Invalid type. Type should be in ['contract', 'uuid'].")

      {:error, :invalid_indices} ->
        conn
        |> put_status(200)
        |> render(:error, error: "Invalid indices, indices should be either contract addresses or uuids split by ','.")

      {:error, :invalid_user} ->
        conn
        |> put_status(200)
        |> render(:error, error: "Invalid user, user should be the address of wallet.")
    end
  end

  defp is_valid_type_and_indices(index_type, indices) do
    index_list = String.split(indices, ",")

    check_list =
      Enum.map(index_list, fn x ->
        case index_type do
          "contract" -> Address.cast(x)
          "uuid" -> UUID.cast(x)
        end
      end)

    is_valid_type = index_type == "uuid" or index_type == "contract"

    is_valid_indices =
      Enum.all?(check_list, fn x ->
        case x do
          {:ok, _} -> true
          :error -> false
        end
      end)

    cond do
      not is_valid_type -> {:error, :invalid_type}
      is_valid_indices -> {:ok, index_list}
      true -> {:error, :invalid_indices}
    end
  end

  defp is_valid_user_address(user) do
    case user do
      :error ->
        {:ok, nil}

      {:ok, user_address} ->
        case Address.cast(user_address) do
          {:ok, hash} -> {:ok, hash}
          :error -> {:error, :invalid_user}
        end
    end
  end

  defp fetch_address(params) do
    {:address_param, Map.fetch(params, "address")}
  end

  defp fetch_contractaddress(params) do
    {:contractaddress_param, Map.fetch(params, "contractaddress")}
  end

  defp fetch_type(params) do
    {:index_type, Map.fetch(params, "type")}
  end

  defp fetch_indices(params) do
    {:indices, Map.fetch(params, "indices")}
  end

  defp fetch_user(params) do
    {:user_address, Map.fetch(params, "user")}
  end

  defp to_address_hash(address_hash_string) do
    {:format, Chain.string_to_address_hash(address_hash_string)}
  end
end
